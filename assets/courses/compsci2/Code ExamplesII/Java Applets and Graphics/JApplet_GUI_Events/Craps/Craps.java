/**  * Craps.java * * Description:	 * @author			Wu 211 005 * @version			 */import java.awt.*;import java.awt.event.*;import java.applet.*;import javax.swing.*;public class Craps extends javax.swing.JApplet                    implements ActionListener{// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE	// member declarations// END GENERATED CODE	boolean isStandalone = false;		private CrapsTable table;    private CrapsGame game;    private JPanel display;    private JTextField wonText, lostText, pointText;    private int wonCount, lostCount;	public Craps() {		// Supposed to suppress the Swing: checked access to system event queue message.		getRootPane().putClientProperty("defeatSystemEventQueueCheck",Boolean.TRUE);	}	// Retrieve the value of an applet parameter	public String getParameter(String key, String def) {		return isStandalone ? System.getProperty(key, def) :			(getParameter(key) != null ? getParameter(key) : def);	}	// Get info on the applet parameters	public String[][] getParameterInfo() {		return null;	}	// Get applet information	public String getAppletInfo() {		return "Applet Information";	}	// Initialize the applet	public void init() {		/*try {			initComponents();		}		catch (Exception e) {			e.printStackTrace();		}		*/    display = new JPanel(new GridLayout(2, 3, 10, 0));    display.add(new JLabel("    Won:"));    display.add(new JLabel("    Lost:"));    display.add(new JLabel("    Point:"));    Font displayFont = new Font("Monospaced", Font.BOLD, 16);    wonText = new JTextField("  0", 5);    wonText.setFont(displayFont);    wonText.setEditable(false);    wonText.setBackground(Color.white);    display.add(wonText);    lostText = new JTextField("  0", 5);    lostText.setFont(displayFont);    lostText.setEditable(false);    lostText.setBackground(Color.white);    display.add(lostText);    pointText = new JTextField(5);    pointText.setFont(displayFont);    pointText.setEditable(false);    pointText.setBackground(Color.darkGray);    display.add(pointText);    JPanel controls = new JPanel();    JButton rollButton = new JButton("Roll");    rollButton.addActionListener(this);    controls.add(rollButton);    table = new CrapsTable(this);    table.setBackground(Color.green);    Container c = getContentPane();    c.add(display, BorderLayout.NORTH);    c.add(table, BorderLayout.CENTER);    c.add(controls, BorderLayout.SOUTH);    game = new CrapsGame();  }	public void initComponents() throws Exception {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE		// the following code sets the frame's initial state		setLocation(new java.awt.Point(0, 0));		getContentPane().setLayout(null);		setSize(new java.awt.Dimension(400, 300));// END GENERATED CODE	}		public void actionPerformed(ActionEvent e)  {    if (!table.diceAreRolling())      table.rollDice();  }  public void processRoll(int pts)  {    int result;    result = game.nextRoll(pts);        if (result > 0)    {      wonCount++;      wonText.setText("  " + wonCount);      pointText.setText("");      pointText.setBackground(Color.darkGray);    }    else if (result < 0)    {      lostCount++;      lostText.setText("  " + lostCount);      pointText.setText("");      pointText.setBackground(Color.darkGray);    }    else    {      pointText.setText("  " + game.getPoint());      pointText.setBackground(Color.yellow);    }  }}
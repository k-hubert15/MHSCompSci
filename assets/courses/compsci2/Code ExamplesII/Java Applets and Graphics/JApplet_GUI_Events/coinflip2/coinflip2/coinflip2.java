/**  * coinflip2.java * * Description:	 * @author			Wu 211 009 * @version			 */package coinflip2;import java.awt.*;import java.awt.event.*;import java.applet.*;import java.util.Random;import java.lang.Thread;public class coinflip2 extends java.applet.Applet {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE	// member declarations// END GENERATED CODE	boolean isStandalone = false;	// Variables to hold applet parameters	int numflips;	int heads = 0, tails = 0;	String sH, sT;	Random myRandGen = new Random();	public coinflip2() {	}	// Retrieve the value of an applet parameter	public String getParameter(String key, String def) {		return isStandalone ? System.getProperty(key, def) :			(getParameter(key) != null ? getParameter(key) : def);	}	// Get info on the applet parameters	public String[][] getParameterInfo() {		String info[][] =		{			{"numflips", "int", ""}		};		return info;	}	// Get applet information	public String getAppletInfo() {		return "Applet Information";	}	// Initialize the applet	public void init() {		try { numflips = Integer.parseInt(this.getParameter("numflips","100")); } catch (Exception e) { e.printStackTrace(); }		try {			initComponents();		}		catch (Exception e) {			e.printStackTrace();		}	}	public void initComponents() throws Exception {// IMPORTANT: Source code between BEGIN/END comment pair will be regenerated// every time the form is saved. All manual changes will be overwritten.// BEGIN GENERATED CODE		// the following code sets the frame's initial state		setLocation(new java.awt.Point(0, 0));		setLayout(null);		setSize(new java.awt.Dimension(600, 500));// END GENERATED CODE	}	// my methods	public int getnumber()	{		int num=0;		num = myRandGen.nextInt();		if(num < 0)			num *= -1;					num = num % 2;				return num;	}		public void start()	{		// generate coin flips						int c = 0,stop = 0;	 		 	while(stop < numflips)	 	{	 		c = getnumber();	 		if(c == 0)	 			{	 			heads += 1;	 			}	 			else	 			{	 			tails += 1;		 			}	 		stop++;	 			 		sH = new Integer(heads).toString();	 		sT = new Integer(tails).toString();	 			 		repaint();	 		// slow down the process	 		try	 		{	 			Thread.sleep(30);	 		}	 		catch (InterruptedException e)	 		{	 			System.out.println("error sleeping");	 				 		}	 				 						 	}	 	//sH = new Integer(heads).toString();	 	//sT = new Integer(tails).toString();	 	//repaint();	}		public void paint(Graphics g)	{				g.setColor(Color.red);		g.drawString("HEADS Total is " + sH , 15, 15);		g.setColor(Color.cyan);		g.drawString("TAILS total is " + sT, 315, 15);				Color h = new Color(200, 200, 200);		Color t = new Color(100, 100, 100);				g.setColor(h);		g.drawOval(30, 50, heads*2, heads*2);		g.fillOval(30, 50, heads*2, heads*2);				g.setColor(t);		g.drawOval(330, 50, tails*2, tails*2);		g.fillOval(330, 50, tails*2, tails*2);							}	}